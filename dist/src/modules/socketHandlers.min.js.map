{"version":3,"sources":["modules/socketHandlers.js"],"names":["_gameState","require","_gameConfig","_collisionUtils","createExplosion","io","players","x","y","throwerId","forEach","player","damage","id","distance","Math","sqrt","pow","values","radius","health","spawnPoint","redSpawn","team","blueSpawn","armor","hasFlag","flag","holder","emit","projectiles","walls","score","medikits","armors","gameState","socket","chatMessages","on","data","_ref","username","playerClass","error","hasGrenade","speed","log","concat","classes","name","push","console","speedMultiplier","speedBoostActive","dx","checkCollision","dy","checkBorderCollision","newX","newY","medikit","abs","active","min","handleFlagPickup","handleFlagCapture","handleMedikitPickup","grenade","grenades","speedBoosters","booster","to","setTimeout","msg","message","lastShot","cooldown","spread","angle","random","vx","projectileSpeed","vy","sin","owner","now","interval","playerId","playerPos","power","Date","grenadeId","playerExists","setInterval","cos","hasCollided","wall","height","maxSteps","steps","clearInterval","finalPosition","Object","targetPlayer","floor","max","leaveMessage","spawn","width","toUpperCase","red","handleArmorPickup"],"mappings":"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","file":"socketHandlers.min.js","sourcesContent":["import { players, projectiles, chatMessages, score, flag, medikits, armors } from './gameState.js';\nimport { walls, redSpawn, blueSpawn, classes } from './gameConfig.js';\nimport { checkCollision, checkBorderCollision } from './collisionUtils.js';\n\n// Granaten-Explosion Funktion\nfunction createExplosion(io, players, x, y, throwerId) {\n    const radius = 100; // Explosionsradius\n    Object.values(players).forEach(player => {\n        if (player.id !== throwerId) {\n            const distance = Math.sqrt(\n                Math.pow(player.x - x, 2) + \n                Math.pow(player.y - y, 2)\n            );\n            \n            if (distance <= radius) {\n                // Berechne Schaden basierend auf der Entfernung\n                let damage;\n                if (distance <= radius / 3) {\n                    damage = 3; // Voller Schaden im inneren Bereich\n                } else if (distance <= radius * 2/3) {\n                    damage = 2; // Mittlerer Schaden\n                } else {\n                    damage = 1; // Minimaler Schaden am Rand\n                }\n                \n                player.health = Math.max(0, player.health - damage);\n                if (player.health <= 0) {\n                    const spawnPoint = player.team === 'red' ? redSpawn : blueSpawn;\n                    player.x = spawnPoint.x;\n                    player.y = spawnPoint.y;\n                    player.health = 2;\n                    player.armor = 0;\n                    player.hasFlag = false;\n                    if (flag.holder === player.id) {\n                        flag.holder = null;\n                        flag.x = 750;\n                        flag.y = 400;\n                    }\n                }\n            }\n        }\n    });\n    \n    // Sende ein Update an alle Clients\n    io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits, armors });\n}\n\nexport function setupSocketHandlers(io, gameState) {\n    io.on('connection', (socket) => {\n        console.log('Neuer Spieler verbunden:', socket.id);\n        socket.emit('chatUpdate', chatMessages);\n        socket.emit('updateMedikits', medikits);\n        socket.emit('updateArmors', armors);\n\n        socket.on('chooseTeam', (data) => {\n            const { username, team, class: playerClass } = data || {};\n\n            if (!username || !team || !playerClass) {\n                console.error(\"❌ Fehler: `username`, `team` oder `class` ist undefined!\", { username, team, playerClass });\n                return;\n            }\n\n            players[socket.id] = {\n                x: team === 'red' ? redSpawn.x : blueSpawn.x,\n                y: team === 'red' ? redSpawn.y : blueSpawn.y,\n                team,\n                username,\n                hasFlag: false,\n                health: 2,\n                armor: 0,\n                class: playerClass,\n                lastShot: 0,\n                hasGrenade: false,\n                speed: 5\n            };\n\n            console.log(`📢 ${username} ist Team ${team.toUpperCase()} als ${classes[playerClass].name} beigetreten!`);\n            chatMessages.push(`📢 ${username} ist Team ${team.toUpperCase()} als ${classes[playerClass].name} beigetreten!`);\n            io.emit('chatUpdate', chatMessages);\n            io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits });\n        });\n\n        socket.on('move', (data) => {\n            const player = players[socket.id];\n            if (!player) return;\n\n            const playerClass = classes[player.class];\n            let speedMultiplier = playerClass.speed / 3; // Basis-Geschwindigkeit\n\n            // Erhöhe die Geschwindigkeit wenn Speed-Boost aktiv ist\n            if (player.speedBoostActive) {\n                speedMultiplier *= 2; // Verdoppele die Geschwindigkeit\n            }\n\n            const newX = player.x + data.dx * speedMultiplier;\n            const newY = player.y + data.dy * speedMultiplier;\n\n            if (!checkCollision(newX - 10, newY - 10, 20, 20, walls) && checkBorderCollision(newX, newY, 20, 20)) {\n                player.x = newX;\n                player.y = newY;\n            }\n\n            handleFlagPickup(socket, player);\n            handleFlagCapture(socket, player, io);\n            handleMedikitPickup(socket, player, io);\n            handleArmorPickup(socket, player, io);\n\n            // Check item pickups\n            gameState.medikits.forEach(medikit => {\n                if (medikit.active && Math.abs(player.x - medikit.x) < 30 && Math.abs(player.y - medikit.y) < 30) {\n                    medikit.active = false;\n                    player.health = Math.min(player.health + 50, 100);\n                    io.emit('updateMedikits', gameState.medikits);\n                }\n            });\n\n            gameState.armors.forEach(armor => {\n                if (armor.active && Math.abs(player.x - armor.x) < 30 && Math.abs(player.y - armor.y) < 30) {\n                    armor.active = false;\n                    player.armor = Math.min(player.armor + 50, 100);\n                    io.emit('updateArmors', gameState.armors);\n                }\n            });\n\n            // Neue Item-Pickup-Logik\n            gameState.grenades.forEach(grenade => {\n                if (grenade.active && Math.abs(player.x - grenade.x) < 30 && Math.abs(player.y - grenade.y) < 30) {\n                    grenade.active = false;\n                    player.hasGrenade = true;\n                    io.emit('updateGrenades', gameState.grenades);\n                }\n            });\n\n            // Speed-Booster Logik\n            gameState.speedBoosters.forEach(booster => {\n                if (booster.active && Math.abs(player.x - booster.x) < 30 && Math.abs(player.y - booster.y) < 30) {\n                    booster.active = false;\n                    player.speedBoostActive = true;\n                    \n                    // Setze Timer für Speed-Boost-Ende\n                    setTimeout(() => {\n                        if (players[socket.id]) {\n                            players[socket.id].speedBoostActive = false;\n                            io.to(socket.id).emit('speedBoostEnded');\n                        }\n                    }, 20000); // 20 Sekunden Speed-Boost\n\n                    io.to(socket.id).emit('speedBoostActive', 20000);\n                    io.emit('updateSpeedBoosters', gameState.speedBoosters);\n                }\n            });\n\n            io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits, armors });\n        });\n\n        socket.on('chatMessage', (msg) => {\n            if (!players[socket.id]) return;\n            const message = `${players[socket.id].username}: ${msg}`;\n            chatMessages.push(message);\n            io.emit('chatUpdate', chatMessages);\n        });\n\n        socket.on('shoot', (data) => {\n            const player = players[socket.id];\n            if (!player) return;\n\n            const playerClass = classes[player.class];\n            const now = Date.now();\n            \n            // Überprüfe Cooldown\n            if (now - player.lastShot < playerClass.cooldown) {\n                return;\n            }\n\n            // Erstelle Projektile basierend auf der Klasse\n            for (let i = 0; i < playerClass.projectileCount; i++) {\n                const spread = playerClass.spread;\n                const angle = data.angle + (Math.random() - 0.5) * spread;\n                \n                projectiles.push({\n                    x: player.x,\n                    y: player.y,\n                    vx: Math.cos(angle) * playerClass.projectileSpeed,\n                    vy: Math.sin(angle) * playerClass.projectileSpeed,\n                    owner: socket.id,\n                    damage: playerClass.damage\n                });\n            }\n\n            player.lastShot = now;\n            io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits, armors });\n        });\n\n        socket.on('throwGrenade', data => {\n            const player = players[socket.id];\n            if (!player || !player.hasGrenade) {\n                console.log('Granaten-Wurf fehlgeschlagen:', { \n                    playerExists: !!player, \n                    hasGrenade: player?.hasGrenade \n                });\n                return;\n            }\n\n            console.log('Granaten-Wurf gestartet:', { \n                playerId: socket.id,\n                playerPos: { x: player.x, y: player.y },\n                angle: data.angle,\n                power: data.power\n            });\n\n            // Granate wird sofort verbraucht\n            player.hasGrenade = false;\n            \n            // Erstelle eine eindeutige ID für diese Granate\n            const grenadeId = `grenade_${Date.now()}_${Math.random()}`;\n            \n            // Initialisiere die Granate mit Startposition und Geschwindigkeit\n            const baseSpeed = 15;\n            const speed = baseSpeed * (data.power || 1);\n            const grenade = {\n                id: grenadeId,\n                x: player.x,\n                y: player.y,\n                dx: Math.cos(data.angle) * speed,\n                dy: Math.sin(data.angle) * speed,\n                throwerId: socket.id\n            };\n\n            // Sende initiale Position\n            io.emit('updateGrenadePosition', {\n                id: grenadeId,\n                x: grenade.x,\n                y: grenade.y\n            });\n\n            // Simuliere Granatenwurf\n            let steps = 0;\n            const maxSteps = 30;\n            const gravity = 0.5;\n            const interval = setInterval(() => {\n                // Aktualisiere Position\n                grenade.x += grenade.dx;\n                grenade.y += grenade.dy;\n                grenade.dy += gravity; // Schwerkraft\n                \n                // Verringere horizontale Geschwindigkeit (Luftwiderstand)\n                grenade.dx *= 0.98;\n\n                // Sende Position an alle Clients\n                io.emit('updateGrenadePosition', {\n                    id: grenadeId,\n                    x: grenade.x,\n                    y: grenade.y\n                });\n\n                // Prüfe Kollisionen\n                let hasCollided = false;\n\n                // Kollision mit Wänden\n                walls.forEach(wall => {\n                    if (!hasCollided && \n                        grenade.x >= wall.x && \n                        grenade.x <= wall.x + wall.width &&\n                        grenade.y >= wall.y && \n                        grenade.y <= wall.y + wall.height) {\n                        hasCollided = true;\n                    }\n                });\n\n                // Kollision mit Spielfeldgrenzen\n                if (!hasCollided && (\n                    grenade.x < 0 || grenade.x > 1600 ||\n                    grenade.y < 0 || grenade.y > 1200\n                )) {\n                    hasCollided = true;\n                }\n\n                // Bei Kollision oder maximaler Flugzeit: Explosion mit Verzögerung\n                if (hasCollided || steps >= maxSteps) {\n                    clearInterval(interval);\n                    \n                    // Zeige die Granate für eine Sekunde am Boden\n                    const finalPosition = { \n                        id: grenadeId,\n                        x: grenade.x, \n                        y: grenade.y \n                    };\n                    io.emit('grenadeDropped', finalPosition);\n                    \n                    // Warte eine Sekunde vor der Explosion\n                    setTimeout(() => {\n                        // Schaden an Spielern in der Nähe\n                        Object.values(players).forEach(targetPlayer => {\n                            if (targetPlayer.id !== grenade.throwerId) {\n                                const distance = Math.sqrt(\n                                    Math.pow(targetPlayer.x - finalPosition.x, 2) + \n                                    Math.pow(targetPlayer.y - finalPosition.y, 2)\n                                );\n                                \n                                if (distance <= 100) { // Explosionsradius\n                                    const damage = Math.floor(3 * (1 - distance / 100)); // 1-3 Schaden\n                                    targetPlayer.health = Math.max(0, targetPlayer.health - damage);\n                                    \n                                    if (targetPlayer.health <= 0) {\n                                        // Respawn\n                                        const spawnPoint = targetPlayer.team === 'red' ? redSpawn : blueSpawn;\n                                        targetPlayer.x = spawnPoint.x;\n                                        targetPlayer.y = spawnPoint.y;\n                                        targetPlayer.health = 100;\n                                        targetPlayer.armor = 0;\n                                    }\n                                }\n                            }\n                        });\n\n                        // Sende Explosion-Event\n                        io.emit('grenadeExplosion', finalPosition);\n\n                        // Aktualisiere Spielzustand\n                        io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits, armors });\n                    }, 1000); // 1 Sekunde Verzögerung\n                }\n\n                steps++;\n            }, 50); // Aktualisiere alle 50ms\n        });\n\n        socket.on('spawn', data => {\n            const { username, team, playerClass } = data;\n            const spawnPoint = team === 'red' ? redSpawn : blueSpawn;\n\n            players[socket.id] = {\n                id: socket.id,\n                x: spawnPoint.x,\n                y: spawnPoint.y,\n                team,\n                username,\n                health: 100,\n                armor: 0,\n                class: playerClass,\n                lastShot: 0,\n                hasGrenade: false,\n                speed: 5,\n                speedBoostActive: false\n            };\n\n            io.emit('playerJoined', { id: socket.id, username, team });\n        });\n\n        socket.on('disconnect', () => {\n            if (players[socket.id]) {\n                const leaveMessage = `❌ ${players[socket.id].username} hat das Spiel verlassen.`;\n                chatMessages.push(leaveMessage);\n                io.emit('chatUpdate', chatMessages);\n                delete players[socket.id];\n            }\n            console.log('Spieler getrennt:', socket.id);\n            io.emit('state', { players, projectiles, walls, flag, score, redSpawn, blueSpawn, medikits, armors });\n        });\n    });\n}\n\nfunction handleFlagPickup(socket, player) {\n    if (!flag.holder && Math.abs(player.x - flag.x) < 20 && Math.abs(player.y - flag.y) < 20) {\n        flag.holder = socket.id;\n        player.hasFlag = true;\n        console.log(`🚩 ${player.username} hat die Flagge aufgenommen!`);\n        socket.emit('chatMessage', `🚩 ${player.username} hat die Flagge aufgenommen!`);\n    }\n}\n\nfunction handleFlagCapture(socket, player, io) {\n    const spawn = player.team === 'red' ? redSpawn : blueSpawn;\n    if (player.hasFlag && player.x > spawn.x && player.x < spawn.x + spawn.width && \n        player.y > spawn.y && player.y < spawn.y + spawn.height) {\n        score[player.team]++;\n        console.log(`🏆 Punkt für Team ${player.team.toUpperCase()}`);\n\n        flag.x = 750;\n        flag.y = 400;\n        flag.holder = null;\n        player.hasFlag = false;\n\n        io.emit('chatMessage', `🎉 ${player.username} hat einen Punkt für Team ${player.team.toUpperCase()} erzielt!`);\n\n        if (score[player.team] === 3) {\n            io.emit('gameOver', player.team);\n            score.red = 0;\n            score.blue = 0;\n        }\n    }\n}\n\nfunction handleMedikitPickup(socket, player, io) {\n    medikits.forEach(medikit => {\n        if (medikit.active && Math.abs(player.x - medikit.x) < 10 && Math.abs(player.y - medikit.y) < 10) {\n            if (player.health < 2) {\n                player.health = 2;\n                console.log(`❤️ ${player.username} hat sich geheilt!`);\n                io.emit('chatMessage', `❤️ ${player.username} hat sich geheilt!`);\n            }\n            medikit.active = false;\n            io.emit('updateMedikits', medikits);\n        }\n    });\n}\n\nfunction handleArmorPickup(socket, player, io) {\n    armors.forEach(armor => {\n        if (armor.active && Math.abs(player.x - armor.x) < 10 && Math.abs(player.y - armor.y) < 10) {\n            if (player.armor === 0) {\n                player.armor = 1;\n                console.log(`🛡 ${player.username} hat Rüstung aufgenommen!`);\n                io.emit('chatMessage', `🛡 ${player.username} hat Rüstung aufgenommen!`);\n            }\n            armor.active = false;\n            io.emit('updateArmors', armors);\n        }\n    });\n} "]}