{"version":3,"sources":["modules/projectileSystem.js"],"names":["_gameState","require","_collisionUtils","_gameConfig","setupProjectileSystem","io","forEach","proj","index","projectiles","x","vx","walls","splice","id","players","player","Math","abs","y","handleProjectileHit","owner","emit","flag","score","distance","maxDistance","minDamage","sqrt","startX","damage","startY","classes","shotgun","armor","health","log","concat","username","console","handlePlayerDeath","redSpawn","team","hasFlag","blueSpawn","holder"],"mappings":"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","file":"projectileSystem.min.js","sourcesContent":["import { players, projectiles, flag, score } from './gameState.js';\nimport { checkCollision } from './collisionUtils.js';\nimport { walls, redSpawn, blueSpawn } from './gameConfig.js';\nimport { classes } from './gameConfig.js';\n\nexport function setupProjectileSystem(io) {\n    return setInterval(() => {\n        projectiles.forEach((proj, index) => {\n            proj.x += proj.vx;\n            proj.y += proj.vy;\n\n            if (checkCollision(proj.x - 5, proj.y - 5, 10, 10, walls)) {\n                projectiles.splice(index, 1);\n                return;\n            }\n\n            for (const id in players) {\n                const player = players[id];\n                if (proj.owner !== id && Math.abs(proj.x - player.x) < 10 && Math.abs(proj.y - player.y) < 10) {\n                    handleProjectileHit(player, proj, id, io);\n                    projectiles.splice(index, 1);\n                    break;\n                }\n            }\n        });\n\n        io.emit('state', { players, projectiles, walls, flag, score });\n    }, 1000 / 60);\n}\n\nfunction handleProjectileHit(player, proj, id, io) {\n    let damage = proj.damage || 1; // Standard-Schaden ist 1, falls nicht definiert\n\n    // Berechne Distanzschaden fÃ¼r Shotgun\n    if (proj.class === 'shotgun') {\n        const distance = Math.sqrt(\n            Math.pow(proj.x - proj.startX, 2) + \n            Math.pow(proj.y - proj.startY, 2)\n        );\n        const maxDistance = classes.shotgun.maxDistance;\n        const minDamage = classes.shotgun.minDamage;\n        \n        // Lineare Abnahme des Schadens mit der Distanz\n        damage = Math.max(\n            minDamage,\n            damage * (1 - (distance / maxDistance))\n        );\n    }\n\n    if (player.armor > 0) {\n        player.armor -= damage;\n        if (player.armor < 0) {\n            player.health += player.armor;\n            player.armor = 0;\n        }\n        console.log(`ðŸ›¡ ${player.username} wurde getroffen! RÃ¼stung: ${player.armor}, Leben: ${player.health}`);\n        io.emit('chatMessage', `ðŸ›¡ ${player.username} wurde getroffen! RÃ¼stung: ${player.armor}, Leben: ${player.health}`);\n    } else {\n        player.health -= damage;\n        console.log(`ðŸ”¥ ${player.username} wurde getroffen! Leben: ${player.health}`);\n        io.emit('chatMessage', `ðŸ”¥ ${player.username} wurde getroffen! Leben: ${player.health}`);\n    }\n\n    if (player.health <= 0) {\n        handlePlayerDeath(player, proj, io);\n    }\n}\n\nfunction handlePlayerDeath(player, proj, io) {\n    console.log(`ðŸ’€ ${player.username} wurde eliminiert!`);\n    io.emit('chatMessage', `ðŸ’€ ${player.username} wurde eliminiert!`);\n\n    player.x = player.team === 'red' ? redSpawn.x + 50 : blueSpawn.x + 50;\n    player.y = player.team === 'red' ? redSpawn.y + 50 : blueSpawn.y + 50;\n    player.health = 2;\n    player.armor = 0;\n\n    if (player.hasFlag) {\n        flag.x = proj.x;\n        flag.y = proj.y;\n        flag.holder = null;\n        player.hasFlag = false;\n    }\n} "]}