{"version":3,"sources":["server.js"],"names":["_express","_interopRequireDefault","require","_http","_socket","_gameConfig","_socketHandlers","_projectileSystem","_itemSystem","e","__esModule","default","_createForOfIteratorHelper","r","o","a","u","_n","t","Symbol","iterator","s","call","n","next","done","f","Array","isArray","_unsupportedIterableToArray","length","F","value","TypeError","_arrayLikeToArray","toString","slice","constructor","name","from","test","express","createServer","app","gameState","players","server","io","exports","y","holder","projectiles","blue","flag","x","armors","score","red","lastSpeedBoosterSpawn","findValidPosition","setupProjectileSystem","setupSocketHandlers","_step","Math","random","setupItemSystem","_iterator","walls","SPAWN_BUFFER","wall","width","height","isValid","err","redDistance","sqrt","pow","redSpawn","blueSpawn","blueDistance","spawnGrenade","position","newGrenade","active","grenades","filter","g","push","emit","newBooster","speedBoosters","b","throwerId","values","forEach","player","damage","id","distance","radius","respawnPlayer","setInterval","Date","now","lastGrenadeSpawn","Object","grenade","abs","hasGrenade","booster","speed","to","spawnSpeedBooster","on","socket","data","steps","interval","dx","cos","angle","dy","sin","clearInterval","listen","PORT","console","log"],"mappings":"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","file":"server.min.js","sourcesContent":["import express from 'express';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport { PORT, walls, redSpawn, blueSpawn } from './src/modules/gameConfig.js';\nimport { setupSocketHandlers } from './src/modules/socketHandlers.js';\nimport { setupProjectileSystem } from './src/modules/projectileSystem.js';\nimport { setupItemSystem } from './src/modules/itemSystem.js';\n\nconst app = express();\nconst server = createServer(app);\nconst io = new Server(server);\n\napp.use(express.static('public'));\n\n// gameState Definition\nconst gameState = {\n    players: {},\n    projectiles: [],\n    walls: [],\n    flag: {\n        x: 800,\n        y: 600,\n        holder: null\n    },\n    score: {\n        red: 0,\n        blue: 0\n    },\n    redSpawn: { x: 100, y: 600 },\n    blueSpawn: { x: 1500, y: 600 },\n    medikits: [],\n    armors: [],\n    grenades: [],\n    speedBoosters: [],\n    lastGrenadeSpawn: 0, // Auf 0 setzen, damit sofort Items spawnen\n    lastSpeedBoosterSpawn: 0\n};\n\n// GameLoop starten\nsetInterval(() => {\n    // Überprüfe Granaten-Spawn\n    if (Date.now() - gameState.lastGrenadeSpawn >= 60000) { // 60 Sekunden\n        spawnGrenade();\n        gameState.lastGrenadeSpawn = Date.now();\n    }\n\n    // Überprüfe Speed-Booster-Spawn\n    if (Date.now() - gameState.lastSpeedBoosterSpawn >= 60000) { // 60 Sekunden\n        spawnSpeedBooster();\n        gameState.lastSpeedBoosterSpawn = Date.now();\n    }\n\n    // Überprüfe Kollisionen mit Items für jeden Spieler\n    Object.values(gameState.players).forEach(player => {\n        // Granaten-Aufsammeln\n        gameState.grenades.forEach(grenade => {\n            if (grenade.active && \n                Math.abs(player.x - grenade.x) < 30 && \n                Math.abs(player.y - grenade.y) < 30) {\n                grenade.active = false;\n                player.hasGrenade = true;\n                io.emit('updateGrenades', gameState.grenades);\n            }\n        });\n\n        // Speed-Booster-Aufsammeln\n        gameState.speedBoosters.forEach(booster => {\n            if (booster.active && \n                Math.abs(player.x - booster.x) < 30 && \n                Math.abs(player.y - booster.y) < 30) {\n                booster.active = false;\n                player.speed = (player.speed || 5) * 1.5;\n                \n                setTimeout(() => {\n                    if (gameState.players[player.id]) {\n                        gameState.players[player.id].speed /= 1.5;\n                    }\n                }, 20000);\n\n                io.to(player.id).emit('speedBoostActive', 20000);\n                io.emit('updateSpeedBoosters', gameState.speedBoosters);\n            }\n        });\n    });\n}, 1000/60); // 60 FPS\n\n// Initialer Spawn von Items\nspawnGrenade();\nspawnSpeedBooster();\n\n// Socket.io Event-Handler einrichten\nsetupSocketHandlers(io, gameState);\n\n// Projektilsystem starten\nsetupProjectileSystem(io, gameState);\n\n// Item-Respawn-System starten\nsetupItemSystem(io, gameState);\n\n// Neue Funktion zum Finden einer gültigen Position\nfunction findValidPosition() {\n    const SPAWN_BUFFER = 100; // Mindestabstand zu Spawnzonen\n    let isValid = false;\n    let x, y;\n\n    while (!isValid) {\n        x = Math.random() * 1600;\n        y = Math.random() * 1200;\n        isValid = true;\n\n        // Prüfe Kollision mit Wänden\n        for (const wall of walls) {\n            if (x >= wall.x - 30 && x <= wall.x + wall.width + 30 &&\n                y >= wall.y - 30 && y <= wall.y + wall.height + 30) {\n                isValid = false;\n                break;\n            }\n        }\n\n        // Prüfe Abstand zu Spawnzonen\n        const redDistance = Math.sqrt(\n            Math.pow(x - redSpawn.x, 2) + \n            Math.pow(y - redSpawn.y, 2)\n        );\n        const blueDistance = Math.sqrt(\n            Math.pow(x - blueSpawn.x, 2) + \n            Math.pow(y - blueSpawn.y, 2)\n        );\n\n        if (redDistance < SPAWN_BUFFER || blueDistance < SPAWN_BUFFER) {\n            isValid = false;\n        }\n\n        // Prüfe, ob Position innerhalb des Spielfelds liegt\n        if (x < 30 || x > 1570 || y < 30 || y > 1170) {\n            isValid = false;\n        }\n    }\n\n    return { x, y };\n}\n\n// Angepasste Spawn-Funktionen\nfunction spawnGrenade() {\n    const position = findValidPosition();\n    const newGrenade = {\n        x: position.x,\n        y: position.y,\n        active: true\n    };\n    \n    // Entferne inaktive Granaten\n    gameState.grenades = gameState.grenades.filter(g => g.active);\n    \n    // Füge neue Granate hinzu\n    gameState.grenades.push(newGrenade);\n    io.emit('updateGrenades', gameState.grenades);\n}\n\nfunction spawnSpeedBooster() {\n    const position = findValidPosition();\n    const newBooster = {\n        x: position.x,\n        y: position.y,\n        active: true\n    };\n    \n    // Entferne inaktive Booster\n    gameState.speedBoosters = gameState.speedBoosters.filter(b => b.active);\n    \n    // Füge neuen Booster hinzu\n    gameState.speedBoosters.push(newBooster);\n    io.emit('updateSpeedBoosters', gameState.speedBoosters);\n}\n\n// Granaten-Explosion\nfunction createExplosion(x, y, throwerId) {\n    const radius = 100; // Explosionsradius\n    Object.values(gameState.players).forEach(player => {\n        if (player.id !== throwerId) {\n            const distance = Math.sqrt(\n                Math.pow(player.x - x, 2) + \n                Math.pow(player.y - y, 2)\n            );\n            \n            if (distance <= radius) {\n                // Berechne Schaden basierend auf der Entfernung\n                let damage;\n                if (distance <= radius / 3) {\n                    damage = 3; // Voller Schaden im inneren Bereich\n                } else if (distance <= radius * 2/3) {\n                    damage = 2; // Mittlerer Schaden\n                } else {\n                    damage = 1; // Minimaler Schaden am Rand\n                }\n                \n                player.health = Math.max(0, player.health - damage);\n                if (player.health <= 0) {\n                    respawnPlayer(player);\n                }\n            }\n        }\n    });\n}\n\n// In den Socket-Events\nio.on('connection', socket => {\n    // ... existing connection code ...\n\n    socket.on('throwGrenade', data => {\n        const player = gameState.players[socket.id];\n        if (player && player.hasGrenade) {\n            const speed = 15;\n            const grenade = {\n                x: player.x,\n                y: player.y,\n                dx: Math.cos(data.angle) * speed,\n                dy: Math.sin(data.angle) * speed,\n                throwerId: socket.id\n            };\n\n            // Simuliere Granatenwurf\n            let steps = 0;\n            const maxSteps = 30; // Maximale Flugzeit\n            const interval = setInterval(() => {\n                grenade.x += grenade.dx;\n                grenade.y += grenade.dy;\n                grenade.dy += 0.5; // Schwerkraft\n\n                // Prüfe Kollisionen mit Wänden\n                gameState.walls.forEach(wall => {\n                    if (grenade.x >= wall.x && \n                        grenade.x <= wall.x + wall.width &&\n                        grenade.y >= wall.y && \n                        grenade.y <= wall.y + wall.height) {\n                        clearInterval(interval);\n                        createExplosion(grenade.x, grenade.y, grenade.throwerId);\n                    }\n                });\n\n                steps++;\n                if (steps >= maxSteps) {\n                    clearInterval(interval);\n                    createExplosion(grenade.x, grenade.y, grenade.throwerId);\n                }\n            }, 50);\n\n            player.hasGrenade = false;\n        }\n    });\n});\n\nserver.listen(PORT, () => {\n    console.log(`✅ Server läuft auf http://localhost:${PORT}`);\n});\n\nexport { server, io, gameState };\n"]}