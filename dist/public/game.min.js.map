{"version":3,"sources":["game.js"],"names":["window","socket","io","canvas","document","getElementById","ctx","getContext","teamSelection","players","projectiles","walls","flag","red","blue","score","redSpawn","keys","blueSpawn","e","includes","key","addEventListener","canShoot","angle","Math","atan2","mouseY","playerY","mouseX","playerX","isNaN","error","console","log","concat","emit","setTimeout","chatMessagesContainer","chatInput","value","preventDefault","message","on","messages","innerHTML","forEach","msg","li","createElement","appendChild","scrollHeight","chooseTeam","usernameInput","team","username","trim","style","display","gameLoop","dx","dy","requestAnimationFrame","fillStyle","id","width","height","render","fillRect","x","y","wall","player","beginPath","fill","hasFlag","i","health","heartX","heartY","armorX","armor","font","fillText","textAlign","proj","arc","PI","medikit","holder","active","state","gameRunning","winner","alert","reload","event","rect","getBoundingClientRect","clientX","left","clientY","top","armors","serverMedikits","serverArmors"],"mappings":"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","file":"game.min.js","sourcesContent":["window.socket = io(); // Socket global verfügbar machen\r\nconst canvas = document.getElementById('gameCanvas');\r\nconst ctx = canvas.getContext('2d');\r\nconst teamSelection = document.getElementById('teamSelection');\r\n\r\nlet players = {};\r\nlet projectiles = [];\r\nlet walls = [];\r\nlet flag = {};\r\nlet score = { red: 0, blue: 0 };\r\nlet redSpawn = {};\r\nlet blueSpawn = {};\r\nlet gameRunning = false;\r\n\r\nconst keys = {};\r\ndocument.addEventListener('keydown', (e) => {\r\n    // 🔹 Bewegung (WASD-Steuerung)\r\n    if ([\"w\", \"a\", \"s\", \"d\"].includes(e.key)) {\r\n        keys[e.key] = true;\r\n    }\r\n\r\n    // 🔹 Schießen (Leertaste)\r\n    if (e.key === \" \" && canShoot) {\r\n        const angle = Math.atan2(mouseY - playerY, mouseX - playerX);\r\n\r\n        if (isNaN(angle)) {\r\n            console.error(\"❌ Fehler: `angle` ist NaN! Mausposition könnte falsch sein.\");\r\n            return;\r\n        }\r\n\r\n        console.log(`🔫 Schießen mit Winkel: ${angle}`);\r\n        socket.emit('shoot', { angle });\r\n\r\n        canShoot = false;\r\n        setTimeout(() => canShoot = true, 500);\r\n    }\r\n});\r\n\r\n// 🔹 Bewegung stoppen, wenn Taste losgelassen wird\r\ndocument.addEventListener('keyup', (e) => {\r\n    if ([\"w\", \"a\", \"s\", \"d\"].includes(e.key)) {\r\n        keys[e.key] = false;\r\n    }\r\n});\r\n\r\nconst chatInput = document.getElementById('chatInput');\r\nconst chatMessagesContainer = document.getElementById('chatMessages');\r\n\r\ndocument.getElementById('chatForm').addEventListener('submit', (e) => {\r\n    e.preventDefault(); // Verhindert das Neuladen der Seite\r\n    const message = chatInput.value.trim();\r\n    if (message) {\r\n        console.log(\"📤 Nachricht senden:\", message);\r\n        socket.emit('chatMessage', message);\r\n        chatInput.value = '';  // Eingabefeld leeren\r\n    }\r\n});\r\n\r\n// Empfängt Chat-Nachrichten vom Server\r\nsocket.on('chatUpdate', (messages) => {\r\n    console.log(\"📥 Chat-Nachrichten empfangen:\", messages);\r\n    chatMessagesContainer.innerHTML = ''; // Chat leeren\r\n    messages.forEach(msg => {\r\n        const li = document.createElement('li');\r\n        li.textContent = msg;\r\n        chatMessagesContainer.appendChild(li);\r\n    });\r\n    chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight; // Auto-Scroll\r\n});\r\n\r\n\r\n\r\nlet canShoot = true;\r\n\r\nfunction chooseTeam(team) {\r\n    const usernameInput = document.getElementById('username');\r\n    if (!usernameInput) {\r\n        console.error(\"Fehler: Username-Feld existiert nicht!\");\r\n        return;\r\n    }\r\n\r\n    const username = usernameInput.value.trim();\r\n    if (!username) {\r\n        alert(\"Bitte gib einen Namen ein!\");\r\n        return;\r\n    }\r\n\r\n    console.log(`📢 Sende Team-Wahl: { username: \"${username}\", team: \"${team}\" }`);\r\n    socket.emit('chooseTeam', { username, team });\r\n\r\n    document.getElementById('teamSelection').style.display = 'none';\r\n    document.getElementById('gameCanvas').style.display = 'block';\r\n}\r\n\r\nfunction gameLoop() {\r\n    if (keys['w']) socket.emit('move', { dx: 0, dy: -3 });\r\n    if (keys['a']) socket.emit('move', { dx: -3, dy: 0 });\r\n    if (keys['s']) socket.emit('move', { dx: 0, dy: 3 });\r\n    if (keys['d']) socket.emit('move', { dx: 3, dy: 0 });\r\n\r\n    if (keys[' '] && canShoot) {\r\n        socket.emit('shoot');\r\n        canShoot = false;\r\n        setTimeout(() => canShoot = true, 1000);\r\n    }\r\n\r\n    render();\r\n    requestAnimationFrame(gameLoop);\r\n}\r\n\r\nfunction render() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Spawnzonen\r\n    ctx.fillStyle = 'rgba(255, 0, 0, 0.3)';\r\n    ctx.fillRect(redSpawn.x - 50, redSpawn.y - 50, 100, 100);\r\n    ctx.fillStyle = 'rgba(0, 0, 255, 0.3)';\r\n    ctx.fillRect(blueSpawn.x - 50, blueSpawn.y - 50, 100, 100);\r\n\r\n    // Wände\r\n    ctx.fillStyle = 'grey';\r\n    walls.forEach(wall => ctx.fillRect(wall.x, wall.y, wall.width, wall.height));\r\n\r\n    // Spieler rendern\r\n    for (const id in players) {\r\n        const player = players[id];\r\n\r\n        // Zeichne Spieler-Kreis\r\n        ctx.fillStyle = player.team === 'red' ? 'red' : 'blue';\r\n        ctx.beginPath();\r\n        ctx.arc(player.x, player.y, 10, 0, Math.PI * 2);\r\n        ctx.fill();\r\n\r\n        // Falls der Spieler die Flagge hat, Flagge anzeigen\r\n        if (player.hasFlag) {\r\n            ctx.fillStyle = 'yellow';\r\n            ctx.fillRect(player.x - 5, player.y - 20, 10, 10);\r\n        }\r\n\r\n        const heartX = player.x - 10;  // Startposition für die Anzeige\r\n        const heartY = player.y + 15;  // Unterhalb des Spielers\r\n        \r\n        // ❤️ Erst Leben zeichnen\r\n        ctx.fillStyle = \"red\";\r\n        for (let i = 0; i < player.health; i++) {\r\n            ctx.fillRect(heartX + i * 12, heartY, 10, 10);\r\n        }\r\n        \r\n        // 💙 Dann Rüstung direkt rechts neben das letzte Herz zeichnen\r\n        const armorX = heartX + (player.health * 12);  // Setzt Armor nach die Herzen\r\n        ctx.fillStyle = \"blue\";\r\n        for (let i = 0; i < player.armor; i++) {\r\n            ctx.fillRect(armorX + i * 12, heartY, 10, 10);\r\n        }\r\n\r\n \r\n\r\n        // **Name über dem Spieler anzeigen**\r\n        if (player.username) {\r\n            ctx.fillStyle = \"black\";\r\n            ctx.font = \"14px Arial\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillText(player.username, player.x, player.y - 15); // Name leicht über Spieler\r\n        }\r\n    }\r\n\r\n    // Projektile\r\n    ctx.fillStyle = 'black';\r\n    projectiles.forEach(proj => {\r\n        ctx.beginPath();\r\n        ctx.arc(proj.x, proj.y, 5, 0, Math.PI * 2);\r\n        ctx.fill();\r\n    });\r\n\r\n    // Flagge\r\n    ctx.fillStyle = 'yellow';\r\n    if (!flag.holder) {\r\n        ctx.fillRect(flag.x - 10, flag.y - 10, 20, 20);\r\n    }\r\n\r\n    // **Medikit Rendern**\r\n    ctx.fillStyle = 'green';\r\n    medikits.forEach(medikit => {\r\n    if (medikit.active) {\r\n            ctx.fillRect(medikit.x - 5, medikit.y - 5, 10, 10);\r\n            }\r\n        });\r\n\r\n    \r\n    // **Rüstung Rendern**\r\n        ctx.fillStyle = 'brown';\r\n        armors.forEach(armor => {\r\n        if (armor.active) {\r\n                ctx.fillRect(armor.x - 5, armor.y - 5, 10, 10);\r\n                }\r\n            });\r\n\r\n    // Punktestand\r\n    ctx.fillStyle = 'black';\r\n    ctx.font = '20px Arial';\r\n    ctx.fillText(`Rot: ${score.red} | Blau: ${score.blue}`, 700, 20);\r\n}\r\n\r\n\r\n\r\nsocket.on('state', (state) => {\r\n    console.log(\"📢 Spielstatus empfangen:\", state);  // Debug-Log\r\n\r\n    players = state.players;\r\n    projectiles = state.projectiles;\r\n    walls = state.walls;\r\n    flag = state.flag;\r\n    score = state.score;\r\n    redSpawn = state.redSpawn;\r\n    blueSpawn = state.blueSpawn;\r\n\r\n    // Falls das Game-Loop nicht läuft, starte es!\r\n    if (!gameRunning) {\r\n        gameRunning = true;\r\n        gameLoop();\r\n    }\r\n});\r\n\r\nsocket.on('gameOver', (winner) => {\r\n    alert(`${winner === 'red' ? 'Rotes Team' : 'Blaues Team'} hat gewonnen!`);\r\n    location.reload();\r\n});\r\n\r\nlet mouseX = 0;\r\nlet mouseY = 0;\r\nlet playerX = 0;\r\nlet playerY = 0;\r\n\r\ncanvas.addEventListener('mousemove', (event) => {\r\n    const rect = canvas.getBoundingClientRect();\r\n    mouseX = event.clientX - rect.left;\r\n    mouseY = event.clientY - rect.top;\r\n});\r\n\r\nsocket.on('state', (state) => {\r\n    if (socket.id in state.players) {\r\n        playerX = state.players[socket.id].x;\r\n        playerY = state.players[socket.id].y;\r\n    }\r\n});\r\n\r\ndocument.addEventListener('click', () => {\r\n    if (canShoot) {\r\n        const angle = Math.atan2(mouseY - playerY, mouseX - playerX);\r\n        socket.emit('shoot', { angle });\r\n        canShoot = false;\r\n        setTimeout(() => canShoot = true, 500);\r\n    }\r\n});\r\n\r\n\r\n\r\nlet medikits = [];\r\n\r\nsocket.on('updateMedikits', (serverMedikits) => {\r\n    medikits = serverMedikits;\r\n});\r\n\r\nlet armors = [];\r\n\r\nsocket.on('updateArmors', (serverArmors) => {\r\n    armors = serverArmors;\r\n});\r\n\r\n//export { chooseTeam, gameLoop};\r\n"]}